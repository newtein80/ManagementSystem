/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.4.2.0 (NJsonSchema v10.1.11.0 (Newtonsoft.Json v12.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

import authService from '../components/api-authorization/AuthorizeService';
export class ApiClientBase {
    baseApiUrl: string = "https://localhost:44338/";
    
    protected async transformOptions(options: RequestInit): Promise<RequestInit> {
        const token = await authService.getAccessToken();
        options.headers = { ...options.headers, authorization: `Bearer ${token}`};
        return Promise.resolve(options);
    }

    protected transformResult(url: string, response: Response, processor: (response: Response) => any) {
        return processor(response);
    }

    protected getBaseUrl(defaultUrl: string, baseUrl?: string) {
        return this.baseApiUrl;
    }
}

export class AssetsClient extends ApiClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = this.getBaseUrl("https://localhost:44338", baseUrl);
    }

    create(command: CreateAssetCommand): Promise<number> {
        let url_ = this.baseUrl + "/api/Assets";
        url_ = url_.replace(/[?&]$/, "");

        const content_ = JSON.stringify(command);

        let options_ = <RequestInit>{
            body: content_,
            method: "POST",
            headers: {
                "Content-Type": "application/json",
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processCreate(_response));
        });
    }

    protected processCreate(response: Response): Promise<number> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            result200 = resultData200 !== undefined ? resultData200 : <any>null;
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<number>(<any>null);
    }

    get(): Promise<AssetPrimaryInfoVm[]> {
        let url_ = this.baseUrl + "/api/Assets";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGet(_response));
        });
    }

    protected processGet(response: Response): Promise<AssetPrimaryInfoVm[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(AssetPrimaryInfoVm.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<AssetPrimaryInfoVm[]>(<any>null);
    }
}

export class OidcConfigurationClient extends ApiClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = this.getBaseUrl("https://localhost:44338", baseUrl);
    }

    getClientRequestParameters(clientId: string | null): Promise<FileResponse> {
        let url_ = this.baseUrl + "/_configuration/{clientId}";
        if (clientId === undefined || clientId === null)
            throw new Error("The parameter 'clientId' must be defined.");
        url_ = url_.replace("{clientId}", encodeURIComponent("" + clientId));
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/octet-stream"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGetClientRequestParameters(_response));
        });
    }

    protected processGetClientRequestParameters(response: Response): Promise<FileResponse> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200 || status === 206) {
            const contentDisposition = response.headers ? response.headers.get("content-disposition") : undefined;
            const fileNameMatch = contentDisposition ? /filename="?([^"]*?)"?(;|$)/g.exec(contentDisposition) : undefined;
            const fileName = fileNameMatch && fileNameMatch.length > 1 ? fileNameMatch[1] : undefined;
            return response.blob().then(blob => { return { fileName: fileName, data: blob, status: status, headers: _headers }; });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<FileResponse>(<any>null);
    }
}

export class WeatherForecastClient extends ApiClientBase {
    private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
    private baseUrl: string;
    protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

    constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
        super();
        this.http = http ? http : <any>window;
        this.baseUrl = this.getBaseUrl("https://localhost:44338", baseUrl);
    }

    get(): Promise<WeatherForecast[]> {
        let url_ = this.baseUrl + "/WeatherForecast";
        url_ = url_.replace(/[?&]$/, "");

        let options_ = <RequestInit>{
            method: "GET",
            headers: {
                "Accept": "application/json"
            }
        };

        return this.transformOptions(options_).then(transformedOptions_ => {
            return this.http.fetch(url_, transformedOptions_);
        }).then((_response: Response) => {
            return this.transformResult(url_, _response, (_response: Response) => this.processGet(_response));
        });
    }

    protected processGet(response: Response): Promise<WeatherForecast[]> {
        const status = response.status;
        let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
        if (status === 200) {
            return response.text().then((_responseText) => {
            let result200: any = null;
            let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
            if (Array.isArray(resultData200)) {
                result200 = [] as any;
                for (let item of resultData200)
                    result200!.push(WeatherForecast.fromJS(item));
            }
            return result200;
            });
        } else if (status !== 200 && status !== 204) {
            return response.text().then((_responseText) => {
            return throwException("An unexpected server error occurred.", status, _responseText, _headers);
            });
        }
        return Promise.resolve<WeatherForecast[]>(<any>null);
    }
}

export class CreateAssetCommand implements ICreateAssetCommand {
    assetName?: string | undefined;
    hostName?: string | undefined;
    ipAddress?: string | undefined;
    riskPoint?: number;
    assetPoint?: number;
    assetType?: AssetType;
    assetKind?: AssetKind;
    description?: string | undefined;
    regTime?: Date;
    setTime?: Date | undefined;
    modTime?: Date | undefined;
    assetSubInfos?: AssetSubInfoVm[] | undefined;

    constructor(data?: ICreateAssetCommand) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.assetName = _data["assetName"];
            this.hostName = _data["hostName"];
            this.ipAddress = _data["ipAddress"];
            this.riskPoint = _data["riskPoint"];
            this.assetPoint = _data["assetPoint"];
            this.assetType = _data["assetType"];
            this.assetKind = _data["assetKind"];
            this.description = _data["description"];
            this.regTime = _data["regTime"] ? new Date(_data["regTime"].toString()) : <any>undefined;
            this.setTime = _data["setTime"] ? new Date(_data["setTime"].toString()) : <any>undefined;
            this.modTime = _data["modTime"] ? new Date(_data["modTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["assetSubInfos"])) {
                this.assetSubInfos = [] as any;
                for (let item of _data["assetSubInfos"])
                    this.assetSubInfos!.push(AssetSubInfoVm.fromJS(item));
            }
        }
    }

    static fromJS(data: any): CreateAssetCommand {
        data = typeof data === 'object' ? data : {};
        let result = new CreateAssetCommand();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["assetName"] = this.assetName;
        data["hostName"] = this.hostName;
        data["ipAddress"] = this.ipAddress;
        data["riskPoint"] = this.riskPoint;
        data["assetPoint"] = this.assetPoint;
        data["assetType"] = this.assetType;
        data["assetKind"] = this.assetKind;
        data["description"] = this.description;
        data["regTime"] = this.regTime ? this.regTime.toISOString() : <any>undefined;
        data["setTime"] = this.setTime ? this.setTime.toISOString() : <any>undefined;
        data["modTime"] = this.modTime ? this.modTime.toISOString() : <any>undefined;
        if (Array.isArray(this.assetSubInfos)) {
            data["assetSubInfos"] = [];
            for (let item of this.assetSubInfos)
                data["assetSubInfos"].push(item.toJSON());
        }
        return data; 
    }
}

export interface ICreateAssetCommand {
    assetName?: string | undefined;
    hostName?: string | undefined;
    ipAddress?: string | undefined;
    riskPoint?: number;
    assetPoint?: number;
    assetType?: AssetType;
    assetKind?: AssetKind;
    description?: string | undefined;
    regTime?: Date;
    setTime?: Date | undefined;
    modTime?: Date | undefined;
    assetSubInfos?: AssetSubInfoVm[] | undefined;
}

export enum AssetType {
    Hardware = 0,
    Software = 1,
    Web = 2,
    Etc = 3,
}

export enum AssetKind {
    Server = 0,
    Database = 1,
    Security = 2,
    Network = 3,
    WebApp = 4,
    Url = 5,
}

export class AssetSubInfoVm implements IAssetSubInfoVm {
    id?: number;
    orgName?: string | undefined;
    riskGrade?: number;
    assetRiskGrade?: number;

    constructor(data?: IAssetSubInfoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.orgName = _data["orgName"];
            this.riskGrade = _data["riskGrade"];
            this.assetRiskGrade = _data["assetRiskGrade"];
        }
    }

    static fromJS(data: any): AssetSubInfoVm {
        data = typeof data === 'object' ? data : {};
        let result = new AssetSubInfoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["orgName"] = this.orgName;
        data["riskGrade"] = this.riskGrade;
        data["assetRiskGrade"] = this.assetRiskGrade;
        return data; 
    }
}

export interface IAssetSubInfoVm {
    id?: number;
    orgName?: string | undefined;
    riskGrade?: number;
    assetRiskGrade?: number;
}

export class AssetPrimaryInfoVm implements IAssetPrimaryInfoVm {
    id?: number;
    assetName?: string | undefined;
    hostName?: string | undefined;
    ipAddress?: string | undefined;
    riskPoint?: number;
    assetPoint?: number;
    assetType?: AssetType;
    assetKind?: AssetKind;
    description?: string | undefined;
    regTime?: Date;
    setTime?: Date | undefined;
    modTime?: Date | undefined;
    assetSubInfos?: AssetSubInfoVm[] | undefined;
    craeted?: Date;

    constructor(data?: IAssetPrimaryInfoVm) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.id = _data["id"];
            this.assetName = _data["assetName"];
            this.hostName = _data["hostName"];
            this.ipAddress = _data["ipAddress"];
            this.riskPoint = _data["riskPoint"];
            this.assetPoint = _data["assetPoint"];
            this.assetType = _data["assetType"];
            this.assetKind = _data["assetKind"];
            this.description = _data["description"];
            this.regTime = _data["regTime"] ? new Date(_data["regTime"].toString()) : <any>undefined;
            this.setTime = _data["setTime"] ? new Date(_data["setTime"].toString()) : <any>undefined;
            this.modTime = _data["modTime"] ? new Date(_data["modTime"].toString()) : <any>undefined;
            if (Array.isArray(_data["assetSubInfos"])) {
                this.assetSubInfos = [] as any;
                for (let item of _data["assetSubInfos"])
                    this.assetSubInfos!.push(AssetSubInfoVm.fromJS(item));
            }
            this.craeted = _data["craeted"] ? new Date(_data["craeted"].toString()) : <any>undefined;
        }
    }

    static fromJS(data: any): AssetPrimaryInfoVm {
        data = typeof data === 'object' ? data : {};
        let result = new AssetPrimaryInfoVm();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["id"] = this.id;
        data["assetName"] = this.assetName;
        data["hostName"] = this.hostName;
        data["ipAddress"] = this.ipAddress;
        data["riskPoint"] = this.riskPoint;
        data["assetPoint"] = this.assetPoint;
        data["assetType"] = this.assetType;
        data["assetKind"] = this.assetKind;
        data["description"] = this.description;
        data["regTime"] = this.regTime ? this.regTime.toISOString() : <any>undefined;
        data["setTime"] = this.setTime ? this.setTime.toISOString() : <any>undefined;
        data["modTime"] = this.modTime ? this.modTime.toISOString() : <any>undefined;
        if (Array.isArray(this.assetSubInfos)) {
            data["assetSubInfos"] = [];
            for (let item of this.assetSubInfos)
                data["assetSubInfos"].push(item.toJSON());
        }
        data["craeted"] = this.craeted ? this.craeted.toISOString() : <any>undefined;
        return data; 
    }
}

export interface IAssetPrimaryInfoVm {
    id?: number;
    assetName?: string | undefined;
    hostName?: string | undefined;
    ipAddress?: string | undefined;
    riskPoint?: number;
    assetPoint?: number;
    assetType?: AssetType;
    assetKind?: AssetKind;
    description?: string | undefined;
    regTime?: Date;
    setTime?: Date | undefined;
    modTime?: Date | undefined;
    assetSubInfos?: AssetSubInfoVm[] | undefined;
    craeted?: Date;
}

export class WeatherForecast implements IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;

    constructor(data?: IWeatherForecast) {
        if (data) {
            for (var property in data) {
                if (data.hasOwnProperty(property))
                    (<any>this)[property] = (<any>data)[property];
            }
        }
    }

    init(_data?: any) {
        if (_data) {
            this.date = _data["date"] ? new Date(_data["date"].toString()) : <any>undefined;
            this.temperatureC = _data["temperatureC"];
            this.temperatureF = _data["temperatureF"];
            this.summary = _data["summary"];
        }
    }

    static fromJS(data: any): WeatherForecast {
        data = typeof data === 'object' ? data : {};
        let result = new WeatherForecast();
        result.init(data);
        return result;
    }

    toJSON(data?: any) {
        data = typeof data === 'object' ? data : {};
        data["date"] = this.date ? this.date.toISOString() : <any>undefined;
        data["temperatureC"] = this.temperatureC;
        data["temperatureF"] = this.temperatureF;
        data["summary"] = this.summary;
        return data; 
    }
}

export interface IWeatherForecast {
    date?: Date;
    temperatureC?: number;
    temperatureF?: number;
    summary?: string | undefined;
}

export interface FileResponse {
    data: Blob;
    status: number;
    fileName?: string;
    headers?: { [name: string]: any };
}

export class ApiException extends Error {
    message: string;
    status: number;
    response: string;
    headers: { [key: string]: any; };
    result: any;

    constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
        super();

        this.message = message;
        this.status = status;
        this.response = response;
        this.headers = headers;
        this.result = result;
    }

    protected isApiException = true;

    static isApiException(obj: any): obj is ApiException {
        return obj.isApiException === true;
    }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
    if (result !== null && result !== undefined)
        throw result;
    else
        throw new ApiException(message, status, response, headers, null);
}